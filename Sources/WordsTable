using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WordsTable : MonoBehaviour
{
    [SerializeField] private WordsTableSettings _settings;
    [SerializeField] private WordsSettingsContainerDefault _settingsContainer;
    [SerializeField] private Word _wordPrefab;
    [SerializeField] private Transform _content;

    [SerializeField] private int _wordsInPageCount = 15;

    private List<List<Word>> _words = new List<List<Word>>(25);
    private int _currentPageIndex = 0;


    public void NextPage() => StartCoroutine(Display(++_currentPageIndex * _wordsInPageCount, _wordsInPageCount));

    private IEnumerator Start()
    {
        yield return StartCoroutine(_settings.SetWordsSettings(_settingsContainer.GetWords()));
        //CreateWords(10);
        yield return StartCoroutine(Display(15, 15));
    }

    private IEnumerator CreateWords(int count)
    {
        for (int y = 0; y < count/* && y < _settings.WordsSettings.Count*/; y++)
        {
            _words.Add(new List<Word>(_settings.WordsSettings[y].Count));
            for (int x = 0; x < _settings.WordsSettings[y].Count; x++) _words[y].Add(Instantiate(_wordPrefab.gameObject, _content).GetComponent<Word>());

            if (y % 5 == 0) yield return null;
        }
    }
    private void ActiveWords(int count)
    {
        bool countMoreY = true;
        for (int y = 0; y < _words.Count; y++)
        {
            countMoreY = count > y;
            foreach (var item in _words[y]) item.gameObject.SetActive(countMoreY);
        }
    }

    private IEnumerator Display(int startIndex, int count)
    {
        if (startIndex + count > _settings.WordsSettings.Count) count = _settings.WordsSettings.Count - startIndex;
        if (count > _words.Count) yield return StartCoroutine(CreateWords(count - _words.Count));
        else if (count < _words.Count) ActiveWords(count);

        for (int y = 0; y < count && y < _settings.WordsSettings.Count - startIndex; y++)
            for (int x = 0; x < _settings.WordsSettings[y].Count; x++)
                _words[y][x].Updating(_settings.WordsSettings[y + startIndex][x]);
    }
}
